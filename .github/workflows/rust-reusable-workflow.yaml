# .github/workflows/reusable-workflow.yml

name: Reusable Rust Build Workflow
on:
  workflow_call:
    inputs:
      toolchain:
        description: 'Rust toolchain version (e.g., stable, nightly)'
        required: true
        default: 'stable'
      target:
        description: 'Compilation target (e.g., x86_64-unknown-linux-gnu)'
        required: true
        default: 'x86_64-unknown-linux-gnu'
      components:
        description: 'Rust components to install (comma-separated, e.g., clippy, rustfmt, llvm-tools)'
        required: false
        default: 'clippy, rustfmt, llvm-tools'
      rustflags:
        description: 'Rust compiler flags (e.g., -C opt-level=3 -C target-cpu=native -C lto)'
        required: false
        default: ''
      release:
        description: 'Build release version (true/false)'
        required: true
        default: 'true'
      cache:
        description: 'Enable cache (true/false)'
        required: false
        default: 'true'
      cache-key:
        description: 'Cache key for cargo cache'
        required: false
        default: 'cargo-cache'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ inputs.toolchain }}
        target: ${{ inputs.target }}
        components: ''

    - name: Install additional components
      run: |
        if [ -n "${{ inputs.components }}" ]; then
          IFS=',' read -r -a components <<< "${{ inputs.components }}"
          for component in "${components[@]}"; do
            rustup component add "$(echo $component | xargs)"
          done
        fi

    - name: Set Rust flags
      run: echo "RUSTFLAGS=${{ inputs.rustflags }}" >> $GITHUB_ENV

    - name: Set up cache
      if: ${{ inputs.cache == 'true' }}
      uses: actions/cache@v2
      with:
        path: ~/.cargo
        key: ${{ inputs.cache-key }}

    - name: Build Project
      run: |
        if [ "${{ inputs.release }}" == "true" ]; then
          cargo build --release
        else
          cargo build
        fi

    - name: Run Tests
      run: cargo test

    - name: Display Rust Environment
      run: rustup show

    - name: Display Rust Components
      run: rustup component list --installed
